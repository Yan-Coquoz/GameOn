/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("function editNav() {\r\n  var topNav = document.getElementById(\"myTopnav\");\r\n  if (topNav.className === \"topnav\") {\r\n    topNav.className += \" responsive\";\r\n  } else {\r\n    topNav.className = \"topnav\";\r\n  }\r\n}\r\n\r\n// DOM Elements\r\nconst modalbg = document.querySelector(\".bground\");\r\nconst modalContent = document.querySelector(\".content\");\r\nconst modalBtn = document.querySelectorAll(\".modal-btn\");\r\nconst divFormData = document.querySelectorAll(\".formData\");\r\nconst closeBtn = document.querySelector(\".close\");\r\nconst formulaire = document.querySelector(\"form\");\r\nconst submitBtn = document.querySelector(\".btn-submit\");\r\nconst prenom = document.querySelector(\"#first\");\r\nconst nom = document.querySelector(\"#last\");\r\nconst email = document.querySelector(\"#email\");\r\nconst naissance = document.querySelector(\"#birthdate\");\r\nconst nbGame = document.querySelector(\"#quantity\");\r\nconst cgu = document.querySelector(\"#checkbox1\");\r\nconst allRadios = document.querySelectorAll('input[name=\"location\"]');\r\n\r\nconst formValidations = [];\r\nconst sendError = document.createElement(\"span\");\r\nsendError.classList.add(\"errorMsg\");\r\nsendError.style.color = \"red\";\r\n\r\n// launch modal event\r\nmodalBtn.forEach((btn) => btn.addEventListener(\"click\", launchModal));\r\n// close modal event\r\ncloseBtn.addEventListener(\"click\", closeModal);\r\n// écoute du formulaire\r\nformulaire.addEventListener(\"submit\", (evt) => {\r\n  // arreter le comportement par defaut du bouton type submit\r\n  evt.preventDefault();\r\n  // je nettoie les valeurs du formulaires (si il y a eu des erreurs)\r\n  clearForm(\"error\");\r\n  checkFormValidation();\r\n});\r\nprenom.addEventListener(\"input\", (evt) => {\r\n  checkName(evt);\r\n});\r\nnom.addEventListener(\"input\", (evt) => {\r\n  checkName(evt);\r\n});\r\nemail.addEventListener(\"input\", (evt) => {\r\n  checkEmail(evt);\r\n});\r\nnaissance.addEventListener(\"input\", (evt) => {\r\n  checkBirthDate(evt);\r\n});\r\nnbGame.addEventListener(\"input\", (evt) => {\r\n  checkNbGame(evt);\r\n});\r\nallRadios.forEach((radio) =>\r\n  radio.addEventListener(\"input\", (evt) => checkRadio(evt)),\r\n);\r\ncgu.addEventListener(\"click\", checkCGU);\r\n\r\n// launch modal form\r\nfunction launchModal() {\r\n  clearForm(\"all\");\r\n  modalbg.style.display = \"block\";\r\n}\r\n// close modal form\r\nfunction closeModal() {\r\n  modalbg.style.display = \"none\";\r\n}\r\n\r\nfunction clearForm(value) {\r\n  switch (value) {\r\n    case \"form\":\r\n      // supprime toutes les valeurs du tableaux\r\n      formValidations.length = 0;\r\n      break;\r\n    case \"error\":\r\n      // nettoye les messages d'erreur\r\n      sendError.textContent = \"\";\r\n      break;\r\n    case \"all\":\r\n      formValidations.length = 0;\r\n      sendError.textContent = \"\";\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} inputValue - valeur envoyer de l'input\r\n * @returns {string} en cas d'erreur\r\n */\r\nfunction checkName(inputValue) {\r\n  // console.log(inputValue.target.name);\r\n  sendError.textContent =\r\n    \"Veuillez entrer 2 caractères ou plus pour le champ du nom.\";\r\n  /* \r\n    [A-Z] = tout ce qui est alphabétique\r\n    [0-9;:<>,?!*+/.] = tout ce qui est numérique et caracteres spéciaux\r\n    {2,25}= doit contenir entre 2 et 25 caractères\r\n    gi = global(la valeur complète) et case insensitive \r\n    */\r\n  if (/[A-Z]{2,25}/gi.test(inputValue.target.value)) {\r\n    clearForm(\"error\");\r\n    if (!/[0-9;:<>,?!*+/.]/.test(inputValue.target.value)) {\r\n      // si la condition est bonne, je supprime l'erreur\r\n      clearForm(\"error\");\r\n      // je place dans le tableau la valeur de ce qui est valide\r\n      formValidations.push(inputValue.target.name);\r\n    } else {\r\n      if (inputValue.target.id === \"first\") {\r\n        const error = (sendError.textContent =\r\n          \" Pas de valeurs numérique ni de caractères spéciaux\");\r\n        return divFormData[0].appendChild(error);\r\n      } else if (inputValue.target.id === \"last\") {\r\n        const error = (sendError.textContent = \" Et pas de valeurs numérique\");\r\n        return divFormData[1].appendChild(error);\r\n      }\r\n    }\r\n  } else {\r\n    // condition pour le placement du message d'erreur\r\n    if (inputValue.target.id === \"first\") {\r\n      return divFormData[0].append(sendError);\r\n    } else {\r\n      return divFormData[1].append(sendError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} inputValue - valeur envoyer de l'input\r\n * @returns {string} en cas d'erreur\r\n */\r\nfunction checkEmail(inputValue) {\r\n  sendError.textContent = \"Veuillez enter une adresse email valide\";\r\n\r\n  if (/[A-Z0-9._-]+@[A-Z0-9-]+.[A-Z]{2,4}/gi.test(inputValue.target.value)) {\r\n    clearForm(\"error\");\r\n    formValidations.push(\"email\");\r\n  } else {\r\n    return divFormData[2].append(sendError);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} inputValue - valeur envoyer de l'input\r\n * @returns  {string} en cas d'erreur\r\n */\r\nfunction checkBirthDate(inputValue) {\r\n  /**\r\n   * ^ = commence par ...\r\n   * (19|20)\\d\\d = Doit commancé par 19 ou 20 et se fini par 2 chiffres\r\n   * [-/.] = doit avoir en separation ces caractères : - / .\r\n   * [0-9] = doit contenir que des nombres entre 0 et 9\r\n   */\r\n  if (/^(19|20)\\d\\d+[-/.]+[0-9]+[-/.][0-9]/.test(inputValue.target.value)) {\r\n    clearForm(\"error\");\r\n    formValidations.push(\"date\");\r\n  } else {\r\n    sendError.textContent = \"Vous devez entrer votre date de naissance.\";\r\n    return divFormData[3].append(sendError);\r\n  }\r\n}\r\n\r\nfunction checkNbGame(evt) {\r\n  const goodValue = Number(evt.target.value);\r\n  console.log(typeof goodValue);\r\n  if (typeof goodValue === \"number\") {\r\n    formValidations.push(\"nbChallenge\");\r\n  } else {\r\n    sendError.textContent = \"Vous devez choisir une valeur numérique.\";\r\n    return divFormData[4].append(sendError);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {boolean} evt = par défault la valeur est false\r\n * @returns  {string} en cas d'erreur\r\n */\r\nfunction checkRadio(evt = false) {\r\n  if (!evt) {\r\n    sendError.textContent = \"Vous devez choisir une option.\";\r\n    return divFormData[5].append(sendError);\r\n  } else if (evt.target.checked) {\r\n    formValidations.push(evt.target.checked);\r\n  }\r\n}\r\n\r\nfunction checkCGU() {\r\n  const labelCgu = document.querySelector(\"#cgu\").nextSibling;\r\n\r\n  if (cgu.checked) {\r\n    clearForm(\"error\");\r\n    formValidations.push(\"cgu\");\r\n  } else {\r\n    formValidations.pop(\"cgu\");\r\n    sendError.style.display = \"inline-blocK\";\r\n    sendError.textContent =\r\n      \"Vous devez vérifier que vous acceptez les termes et conditions.\";\r\n    return labelCgu.after(sendError);\r\n  }\r\n}\r\n\r\nfunction checkFormValidation() {\r\n  // for (let index = 0; index < formValidations.length; index++) {\r\n  //   console.log(\r\n  //     `${formValidations[index]} => ${typeof formValidations[index]}`,\r\n  //   );\r\n  // }\r\n\r\n  // je check si les valeurs sont présente dans tableau des validations\r\n  const ville = formValidations.includes(true);\r\n  const cgu = formValidations.includes(\"cgu\");\r\n  // si elles ne sont pas présentes,\r\n  if (!ville) {\r\n    checkRadio();\r\n  }\r\n  if (!cgu) {\r\n    checkCGU();\r\n  }\r\n  if (cgu && ville) {\r\n    // je supprime le formulaire s'il remplit les conditions\r\n    formulaire.innerHTML = \"\";\r\n    // je vide le tabeau des validation et efface les MSGs d'erreur\r\n    clearForm(\"all\");\r\n    // MSG de validation de formulaire\r\n    validationMessage();\r\n  }\r\n}\r\n\r\nfunction validationMessage() {\r\n  // creation d'element du DOM :\r\n  // balise <p>\r\n  const message = document.createElement(\"p\");\r\n  // balise <button>\r\n  const btn = document.createElement(\"button\");\r\n  // creation / placement du texte de confirmation\r\n  message.innerHTML = \"Merci !<br> Votre réservation a été reçue.\";\r\n  message.style.textAlign = \"center\";\r\n  // ajout d'une classe\r\n  message.classList.add(\"message\");\r\n  // ajout du texte du bouton et d'une classe\r\n  btn.textContent = \"Fermer\";\r\n  btn.classList.add(\"button\");\r\n  // style de la modale\r\n  modalContent.style.display = \"flex\";\r\n  modalContent.style.flexDirection = \"column\";\r\n  modalContent.style.justifyContent = \"space-between\";\r\n  modalContent.style.alignItems = \"center\";\r\n  modalContent.style.height = \"80vh\";\r\n  // ajout de style sur le bouton\r\n  btn.style.marginBottom = \"1rem\";\r\n  btn.style.padding = \"1rem 4rem\";\r\n  // placement des elements\r\n  modalContent.appendChild(message);\r\n  modalContent.appendChild(btn);\r\n  // écoute du bouton\r\n  btn.addEventListener(\"click\", closeModal);\r\n}\r\n\n\n//# sourceURL=webpack://gameon-website-fr/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;